For example:

F 220,100,0 becomes 14443520, which is equivalent to 0xDC6400 in hexadecimal.
C 225,30,0 becomes 14753280, equivalent to 0xE11E00.





int	is_map_enclosed2(t_map *map)
{
	int	i;
	int	j;

	// Check top and bottom rows
	i = 0;
	while (i < map->width)
	{
		if (map->map_data[0][i] != '1' && map->map_data[0][i] != ' ')  // Allow spaces, but enforce '1'
		{
			printf("Map enclosure error at top row, column %d: '%c'\n", i, map->map_data[0][i]);
			return (0);
		}
		if (map->map_data[map->height - 1][i] != '1' && map->map_data[map->height - 1][i] != ' ')
		{
			printf("Map enclosure error at bottom row, column %d: '%c'\n", i, map->map_data[map->height - 1][i]);
			return (0);
		}
		i++;
	}
	// Check leftmost and rightmost columns
	j = 0;
	while (j < map->height)
	{
		if (map->map_data[j][0] != '1' && map->map_data[j][0] != ' ')  // Allow spaces at edges
		{
			printf("Map enclosure error at row %d, leftmost column: '%c'\n", j, map->map_data[j][0]);
			return (0);
		}
		if (map->map_data[j][map->width - 1] != '1' && map->map_data[j][map->width - 1] != ' ')
		{
			printf("Map enclosure error at row %d, rightmost column: '%c'\n", j, map->map_data[j][map->width - 1]);
			return (0);
		}
		j++;
	}

	return (1);
}

/* int	is_map_enclosed(t_map *map)
{
	int		row;
	int		col;
	int		player_count;
	char	current;

	if (map == NULL || map->height == 0 || map->width == 0)
		return (0);
	player_count = 0;
	row = 0;
	while (row < map->height)
	{
		col = 0;
		while (col < map->width)
		{
			current = get_map_char(map, row, col);
			if (!is_valid_char(current))
				ft_error("Invalid character in map!");
			if (current == 'N' || current == 'S' ||
				current == 'E' || current == 'W')
				player_count++;
			if (current != ' ')
			{
				if (row == 0 || row == map->height - 1 ||
					col == 0 || col == map->width - 1)
				{
					if (current != '1')
						return (0);
				}
				if (current != '1' && !check_adjacents_not_void(map, row, col))
					return (0);
			}
			col++;
		}
		row++;
	}
	if (player_count != 1)
	{
		if (player_count == 0)
			ft_error("No player position found in map!");
		else
			ft_error("Multiple player positions found in map!");
	}
	return (1);
} */
